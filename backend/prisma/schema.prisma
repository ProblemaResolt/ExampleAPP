generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                    @id @default(cuid())
  email                 String                    @unique
  password              String
  firstName             String
  lastName              String
  role                  UserRole                  @default(MEMBER)
  isEmailVerified       Boolean                   @default(false)
  isActive              Boolean                   @default(true)
  lastLoginAt           DateTime?
  loginAttempts         Int                       @default(0)
  lockedUntil           DateTime?
  resetToken            String?                   @unique
  resetTokenExpiry      DateTime?
  verificationToken     String?                   @unique
  verificationExpiry    DateTime?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  googleId              String?                   @unique
  githubId              String?                   @unique
  companyId             String?
  managerId             String?
  position              String?
  managedCompanyId      String?                   @unique
  phone                 String?
  prefecture            String?
  city                  String?
  streetAddress         String?
  activities            Activity[]
  managedCompany        Company?                  @relation("CompanyManager")
  leaveBalances         LeaveBalance[]            @relation("UserLeaveBalances")
  approvedLeaveRequests LeaveRequest[]            @relation("ApprovedLeaveRequests")
  leaveRequests         LeaveRequest[]            @relation("UserLeaveRequests")
  oauthAccounts         OAuthAccount[]
  projectMemberships    ProjectMembership[]       @relation("ProjectMember")
  sessions              Session[]
  approvedTimeEntries   TimeEntry[]               @relation("ApprovedTimeEntries")
  timeEntries           TimeEntry[]               @relation("UserTimeEntries")
  company               Company?                  @relation("CompanyUsers", fields: [companyId], references: [id])
  manager               User?                     @relation("UserManager", fields: [managerId], references: [id])
  managedMembers        User[]                    @relation("UserManager")
  projectWorkSettings   UserProjectWorkSettings[]
  userSkills            UserSkill[]
  UserWorkSchedule      UserWorkSchedule[]
  workSettings          UserWorkSettings?         @relation("UserWorkSettings")

  @@index([email])
  @@index([role])
  @@index([managerId])
  @@index([companyId])
  @@index([managedCompanyId])
}

model Company {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  description           String?
  website               String?
  logo                  String?
  address               String?
  phone                 String?
  email                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  managerId             String?                @unique
  manager               User?                  @relation("CompanyManager", fields: [managerId], references: [id])
  companySelectedSkills CompanySelectedSkill[] @relation("CompanySkills")
  projects              Project[]              @relation("CompanyProjects")
  legacySkills          Skill[]                @relation("LegacyCompanySkills")
  stripeCustomer        StripeCustomer?
  subscriptions         Subscription[]
  users                 User[]                 @relation("CompanyUsers")
  WorkSchedule          WorkSchedule[]

  @@index([name])
  @@index([managerId])
}

model Subscription {
  id            String             @id @default(cuid())
  companyId     String
  startDate     DateTime
  endDate       DateTime
  autoRenew     Boolean            @default(false)
  paymentMethod String
  billingCycle  String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  couponId      String?
  plan          SubscriptionPlan
  status        SubscriptionStatus
  amount        Float              @default(0)
  payments      Payment[]
  company       Company            @relation(fields: [companyId], references: [id])
  coupon        Coupon?            @relation("CouponSubscriptions", fields: [couponId], references: [id])

  @@index([companyId])
}

model Payment {
  id             String       @id @default(cuid())
  subscriptionId String
  amount         Float
  status         String
  paymentMethod  String
  date           DateTime
  transactionId  String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([transactionId])
}

model OAuthAccount {
  id           String    @id @default(uuid())
  provider     String
  providerId   String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model Coupon {
  id             String         @id @default(uuid())
  code           String         @unique
  discountAmount Float
  isActive       Boolean        @default(true)
  expiryDate     DateTime
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  subscriptions  Subscription[] @relation("CouponSubscriptions")

  @@index([code])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  companyId        String   @unique
  company          Company  @relation(fields: [companyId], references: [id])
}

model Activity {
  id          String   @id @default(uuid())
  type        String
  description String
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
}

model Project {
  id                  String                @id @default(cuid())
  name                String
  description         String?
  startDate           DateTime
  endDate             DateTime?
  status              ProjectStatus         @default(ACTIVE)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  companyId           String
  clientAddress       String?
  clientCity          String?
  clientCompanyName   String?
  clientContactEmail  String?
  clientContactName   String?
  clientContactPhone  String?
  clientPrefecture    String?
  clientStreetAddress String?
  company             Company               @relation("CompanyProjects", fields: [companyId], references: [id])
  members             ProjectMembership[]
  workSettings        ProjectWorkSettings[]
  workReports         WorkReport[]

  @@index([companyId])
}

model ProjectMembership {
  id         String    @id @default(cuid())
  startDate  DateTime  @default(now())
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  projectId  String
  userId     String
  isManager  Boolean   @default(false)
  allocation Float     @default(0.5)
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User      @relation("ProjectMember", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model GlobalSkill {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  category              String?
  description           String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isCustom              Boolean                @default(false)
  companySelectedSkills CompanySelectedSkill[]

  @@index([category])
}

model CompanySelectedSkill {
  id            String       @id @default(cuid())
  companyId     String
  globalSkillId String?
  isRequired    Boolean      @default(false)
  priority      Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  category      String?
  description   String?
  isCustom      Boolean      @default(false)
  skillName     String?
  company       Company      @relation("CompanySkills", fields: [companyId], references: [id], onDelete: Cascade)
  globalSkill   GlobalSkill? @relation(fields: [globalSkillId], references: [id], onDelete: Cascade)
  userSkills    UserSkill[]

  @@unique([companyId, globalSkillId])
  @@index([companyId])
  @@index([globalSkillId])
}

model UserSkill {
  id                     String                @id @default(cuid())
  userId                 String
  skillId                String?
  years                  Int?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  certifications         String?
  companySelectedSkillId String?
  lastUsed               DateTime?
  level                  SkillLevel?
  companySelectedSkill   CompanySelectedSkill? @relation(fields: [companySelectedSkillId], references: [id], onDelete: Cascade)
  skill                  Skill?                @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companySelectedSkillId])
  @@unique([userId, skillId])
  @@index([userId])
  @@index([companySelectedSkillId])
  @@index([skillId])
}

model Skill {
  id           String      @id @default(cuid())
  name         String
  companyId    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isDeprecated Boolean     @default(false)
  company      Company     @relation("LegacyCompanySkills", fields: [companyId], references: [id], onDelete: Cascade)
  userSkills   UserSkill[]

  @@unique([name, companyId])
  @@index([companyId])
}

model TimeEntry {
  id                 String           @id @default(cuid())
  userId             String
  date               DateTime
  clockIn            DateTime?
  clockOut           DateTime?
  totalHours         Float?
  overtimeHours      Float?
  status             AttendanceStatus @default(PENDING)
  note               String?
  workSummary        String?
  achievements       String?
  challenges         String?
  nextDayPlan        String?
  approvedBy         String?
  approvedAt         DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  breakTime          Int?
  transportationCost Int?
  workHours          Float?
  breakEntries       BreakEntry[]
  approver           User?            @relation("ApprovedTimeEntries", fields: [approvedBy], references: [id])
  user               User             @relation("UserTimeEntries", fields: [userId], references: [id], onDelete: Cascade)
  workReports        WorkReport[]

  @@unique([userId, date])
  @@index([userId, date])
  @@index([status])
}

model LeaveRequest {
  id           String        @id @default(cuid())
  userId       String
  leaveType    LeaveType
  startDate    DateTime
  endDate      DateTime
  days         Float
  reason       String?
  status       RequestStatus @default(PENDING)
  requestedAt  DateTime      @default(now())
  approvedBy   String?
  approvedAt   DateTime?
  rejectedAt   DateTime?
  rejectReason String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  approver     User?         @relation("ApprovedLeaveRequests", fields: [approvedBy], references: [id])
  user         User          @relation("UserLeaveRequests", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

model LeaveBalance {
  id            String    @id @default(cuid())
  userId        String
  year          Int
  leaveType     LeaveType
  totalDays     Float
  usedDays      Float     @default(0)
  remainingDays Float
  expiryDate    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation("UserLeaveBalances", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, leaveType])
  @@index([userId])
  @@index([year])
}

model UserWorkSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  workHours          Float    @default(8.0)
  workStartTime      String?  @default("09:00")
  workEndTime        String?  @default("18:00")
  breakTime          Int      @default(60)
  overtimeThreshold  Int      @default(8)
  transportationCost Int      @default(0)
  timeInterval       Int      @default(15)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation("UserWorkSettings", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BreakEntry {
  id          String    @id @default(cuid())
  timeEntryId String
  startTime   DateTime
  endTime     DateTime?
  duration    Float?
  breakType   BreakType @default(LUNCH)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  timeEntry   TimeEntry @relation(fields: [timeEntryId], references: [id], onDelete: Cascade)

  @@index([timeEntryId])
}

model WorkReport {
  id          String       @id @default(cuid())
  timeEntryId String
  projectId   String?
  description String?
  category    WorkCategory @default(OTHER)
  duration    Float
  status      TaskStatus   @default(NOT_STARTED)
  priority    Priority     @default(MEDIUM)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  project     Project?     @relation(fields: [projectId], references: [id])
  timeEntry   TimeEntry    @relation(fields: [timeEntryId], references: [id], onDelete: Cascade)

  @@index([timeEntryId])
  @@index([projectId])
  @@index([category])
}

model UserWorkSchedule {
  id             String       @id
  userId         String
  workScheduleId String
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkSchedule   WorkSchedule @relation(fields: [workScheduleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workScheduleId])
}

model WorkSchedule {
  id                String             @id
  companyId         String
  name              String
  standardHours     Float              @default(8.0)
  flexTimeStart     String?
  flexTimeEnd       String?
  coreTimeStart     String?
  coreTimeEnd       String?
  breakDuration     Float              @default(60)
  overtimeThreshold Float              @default(8.0)
  isFlexTime        Boolean            @default(false)
  isDefault         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  UserWorkSchedule  UserWorkSchedule[]
  Company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model ProjectWorkSettings {
  id                        String                    @id @default(cuid())
  projectId                 String
  name                      String
  standardHours             Float                     @default(8.0)
  workStartTime             String?                   @default("09:00")
  workEndTime               String?                   @default("18:00")
  breakDuration             Int                       @default(60)
  overtimeThreshold         Float                     @default(8.0)
  flexTimeStart             String?
  flexTimeEnd               String?
  coreTimeStart             String?
  coreTimeEnd               String?
  isFlexTime                Boolean                   @default(false)
  workLocation              String?
  address                   String?
  transportationCostDefault Int?                      @default(0)
  weekStartDay              Int                       @default(1)
  isActive                  Boolean                   @default(true)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  holidaySettings           ProjectHolidaySettings[]
  project                   Project                   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userAssignments           UserProjectWorkSettings[]

  @@index([projectId])
}

model ProjectHolidaySettings {
  id                    String              @id @default(cuid())
  projectWorkSettingsId String
  holidayDate           DateTime
  name                  String
  isRecurring           Boolean             @default(false)
  holidayType           HolidayType         @default(NATIONAL)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  projectWorkSettings   ProjectWorkSettings @relation(fields: [projectWorkSettingsId], references: [id], onDelete: Cascade)

  @@index([projectWorkSettingsId])
  @@index([holidayDate])
}

model UserProjectWorkSettings {
  id                    String              @id @default(cuid())
  userId                String
  projectWorkSettingsId String
  startDate             DateTime
  endDate               DateTime?
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  projectWorkSettings   ProjectWorkSettings @relation(fields: [projectWorkSettingsId], references: [id], onDelete: Cascade)
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectWorkSettingsId, startDate])
  @@index([userId])
  @@index([projectWorkSettingsId])
  @@index([startDate])
}

enum LeaveType {
  PAID_LEAVE
  SICK_LEAVE
  PERSONAL_LEAVE
  MATERNITY
  PATERNITY
  SPECIAL
  UNPAID
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum AttendanceStatus {
  PENDING
  APPROVED
  REJECTED
  DRAFT
}

enum BreakType {
  LUNCH
  SHORT
  OTHER
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum WorkCategory {
  DEVELOPMENT
  DESIGN
  MEETING
  RESEARCH
  TESTING
  DOCUMENTATION
  REVIEW
  MAINTENANCE
  TRAINING
  ADMIN
  OTHER
}

enum UserRole {
  ADMIN
  COMPANY
  MANAGER
  MEMBER
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
  PLANNED
  IN_PROGRESS
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum HolidayType {
  NATIONAL
  COMPANY
  PROJECT
  REGIONAL
}
