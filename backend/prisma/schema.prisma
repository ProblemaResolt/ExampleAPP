generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(cuid())
  email              String         @unique
  password           String
  firstName          String
  lastName           String
  role               UserRole       @default(MEMBER)
  isEmailVerified    Boolean        @default(false)
  isActive           Boolean        @default(true)
  lastLoginAt        DateTime?
  loginAttempts      Int            @default(0)
  lockedUntil        DateTime?
  resetToken         String?        @unique
  resetTokenExpiry   DateTime?
  verificationToken  String?        @unique
  verificationExpiry DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  googleId           String?        @unique
  githubId           String?        @unique
  companyId          String?
  managedCompanyId   String?        @unique
  managerId          String?
  position           String?
  activities         Activity[]
  managedCompany     Company?       @relation("CompanyManager")
  oauthAccounts      OAuthAccount[]
  sessions           Session[]
  company            Company?       @relation("CompanyUsers", fields: [companyId], references: [id])
  manager            User?          @relation("UserManager", fields: [managerId], references: [id])
  managedMembers     User[]         @relation("UserManager")
  projectMemberships ProjectMembership[] @relation("ProjectMember")

  @@index([email])
  @@index([role])
  @@index([managerId])
  @@index([companyId])
  @@index([managedCompanyId])
}

model Company {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String?
  website        String?
  logo           String?
  address        String?
  phone          String?
  email          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  managerId      String?         @unique
  manager        User?           @relation("CompanyManager", fields: [managerId], references: [id])
  stripeCustomer StripeCustomer?
  subscriptions  Subscription[]
  users          User[]          @relation("CompanyUsers")
  projects       Project[]       @relation("CompanyProjects")

  @@index([name])
  @@index([managerId])
}

model Subscription {
  id            String             @id @default(cuid())
  companyId     String
  startDate     DateTime
  endDate       DateTime
  autoRenew     Boolean            @default(false)
  paymentMethod String
  billingCycle  String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  couponId      String?
  plan          SubscriptionPlan
  status        SubscriptionStatus
  amount        Float              @default(0)
  payments      Payment[]
  company       Company            @relation(fields: [companyId], references: [id])
  coupon        Coupon?            @relation("CouponSubscriptions", fields: [couponId], references: [id])

  @@index([companyId])
}

model Payment {
  id             String       @id @default(cuid())
  subscriptionId String
  amount         Float
  status         String
  paymentMethod  String
  date           DateTime
  transactionId  String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([transactionId])
}

model OAuthAccount {
  id           String    @id @default(uuid())
  provider     String
  providerId   String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model Coupon {
  id             String         @id @default(uuid())
  code           String         @unique
  discountAmount Float
  isActive       Boolean        @default(true)
  expiryDate     DateTime
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  subscriptions  Subscription[] @relation("CouponSubscriptions")

  @@index([code])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  companyId        String   @unique
  company          Company  @relation(fields: [companyId], references: [id])
}

model Activity {
  id          String   @id @default(uuid())
  type        String
  description String
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company  @relation("CompanyProjects", fields: [companyId], references: [id])
  companyId   String
  members     ProjectMembership[]

  @@index([companyId])
}

model ProjectMembership {
  id        String   @id @default(cuid())
  startDate DateTime @default(now())
  endDate   DateTime?
  isManager Boolean  @default(false)
  allocation Float   @default(0.5) // 工数（0.0 - 1.0の値）デフォルトは50%
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User     @relation("ProjectMember", fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

enum UserRole {
  ADMIN
  COMPANY
  MANAGER
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PENDING
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}
