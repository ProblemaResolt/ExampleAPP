version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: auth_app_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: auth_app_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: auth_app_backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/app?schema=public
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=development
      - PORT=4000
      - FRONTEND_URL=http://localhost:3000
      - SESSION_SECRET=your-super-secret-session-key-change-in-production
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Windows I/O エラー対策: ボリュームマウントを削除
    # volumes:
    #   - ./backend:/app
    #   - backend_node_modules:/app/node_modules
    #   - /app/dist
    networks:
      - app_network
    restart: unless-stopped
    stdin_open: true
    tty: true

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: auth_app_frontend
    environment:
      - VITE_API_URL=http://localhost:4000
      - NODE_ENV=development
      - VITE_HOST=0.0.0.0
      - VITE_PORT=3000
      # Windows Docker I/O エラー対策環境変数
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=5000
      - WATCHPACK_POLLING=true
      - VITE_FORCE_OPTIMIZE=false
      - FORCE_COLOR=0
      - CI=false
    ports:
      - "3000:3000"
    # Windows I/O エラー対策: ボリュームマウントを完全に削除
    # volumes:
    #   - ./frontend:/app:delegated
    #   - frontend_node_modules:/app/node_modules
    #   - /app/.vite
    #   - /app/dist
    #   - /app/node_modules/.cache
    depends_on:
      - backend
    networks:
      - app_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: auth_app_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge
