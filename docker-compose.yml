version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: auth_app_postgres
    mem_limit: 256m
    memswap_limit: 256m
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: auth_app_redis
    mem_limit: 128m
    memswap_limit: 128m
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: auth_app_backend
    mem_limit: 256m
    memswap_limit: 256m
    env_file:
      - ./backend/.env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/app?schema=public
      - REDIS_URL=redis://redis:6379
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # node_modules除外でIOエラー回避、ソースコードはボリュームマウント
    volumes:
      - ./backend/src:/app/src:cached
      - ./backend/prisma:/app/prisma:cached
      - ./backend/package.json:/app/package.json:cached
      # node_modulesは除外してIOエラー回避
      - backend_node_modules:/app/node_modules
    networks:
      - app_network
    restart: unless-stopped
    stdin_open: true
    tty: true

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: auth_app_frontend
    mem_limit: 512m
    memswap_limit: 512m
    ports:
      - "3000:3000"
      - "24678:24678"  # HMRポート
    env_file:
      - ./frontend/.env
    environment:
      # 開発モードに変更してライブリロードを有効化
      - NODE_ENV=development
      - VITE_NODE_ENV=development
    # 全体をマウントしてファイル監視を確実にする
    volumes:
      - ./frontend:/app:cached
      # node_modulesは除外してIOエラー回避
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - app_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: auth_app_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  # node_modules用ボリューム（IOエラー回避）
  frontend_node_modules:
  backend_node_modules:

networks:
  app_network:
    driver: bridge
